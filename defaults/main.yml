# See the [example config] for help in configuring StatsD.
# [example config]: https://github.com/etsy/statsd/blob/master/exampleConfig.js


# Process
# -------

statsd_install_from_source: true

statsd_service_name: statsd
statsd_service_manage: yes

statsd_init_script: /etc/init.d/statsd

statsd_user: statsd
statsd_group: statsd
statsd_conf_dir: "/etc/{{statsd_service_name}}"
statsd_conf_file: "{{statsd_conf_dir}}/config.js"

statsd_version: 0.7.2
statsd_package: "statsd-{{statsd_version}}"
statsd_package_url: "https://github.com/etsy/statsd/archive/v{{statsd_version}}.tar.gz"
statsd_install_dir: "/usr/local/{{statsd_service_name}}"

statsd_run_dir: "/var/run/{{statsd_service_name}}"
statsd_pid_file: "{{statsd_run_dir}}/{{statsd_service_name}}.pid"

# Allows for overriding the process title. If set to false, will not
# override the process title and let the OS set it. The length of the
# title has to be less than or equal to the binary name + cli arguments.
# NOTE: This does not work on Mac's with node versions prior to v0.10
statsd_title: "{{statsd_service_name}}"

# Default health status to be returned and statsd process starts.
statsd_health_status: up

# Set debug flag and leave these unset to run in 'dry' debug mode -
# useful for testing statsd clients without a Graphite server.
statsd_debug: no
# Log all incoming messages
statsd_dump_messages: "{{'true' if statsd_debug else ''}}"


# Server
# ------
# The server to load. The server must exist by name in the directory
# `servers/`. If not specified, the default udp server will be loaded.
#
# Example for tcp server:
#     "./servers/tcp"
statsd_server:
# Address to listen on
statsd_address: 127.0.0.1
# Defines if the address is an IPv4 or IPv6 address
statsd_address_ipv6: no
# Port to listen for messages on
statsd_port: 8125
# Address to run the management TCP interface on
statsd_mgmt_address: 127.0.0.1
# Port to run the management TCP interface on
statsd_mgmt_port: 8126


# Flush and counts
# ----------------
# Interval to flush metrics to each backend (ms)
statsd_flush_interval: 5000
# For time information, calculate the Nth percentile(s) (can be a single
# value or list of floating-point values). Negative values mean to use
# "top" Nth percentile(s) values. (%)
statsd_percent_threshold: 90
# Send stats_counts metrics
statsd_flush_counts: no


# Backends
# --------
# # An array of backends to load. Each backend must exist by name in the
# directory backends/. If not specified, the default graphite backend
# will be loaded.
#
# Example for console and graphite:
#     [ "./backends/console", "./backends/graphite" ]
statsd_backends: []


# Graphite
# --------
# Leave these unset to avoid sending stats to Graphite.
# Hostname or IP of Graphite server
statsd_graphite_host:
# Port of Graphite server
statsd_graphite_port:
# Use the legacy namespace
statsd_graphite_legacy_namespace: yes
# Global prefix to use for sending stats to graphite
statsd_graphite_global_prefix: stats
# Graphite prefix for counter metrics
statsd_graphite_prefix_counter: counters
# Graphite prefix for timer metrics
statsd_graphite_prefix_timer: timers
# Graphite prefix for gauge metrics
statsd_graphite_prefix_gauge: gauges
# Graphite prefix for set metrics
statsd_graphite_prefix_set: sets
# Global suffix to use for sending stats to graphite This is
# particularly useful for sending per host stats by Settings this value
# to: `require('os').hostname().split('.')[0]`
statsd_graphite_global_suffix: ''


# Log the most frequently sent keys
# ---------------------------------
# How often to log frequent keys (ms)
statsd_key_flush_interval: 0
# Percentage of frequent keys to log (%)
statsd_key_flush_percent: 100
# Location of log file for frequent keys
statsd_key_flush_log: STDOUT


# Inactive values
# ---------------
# Don't send values to graphite for inactive counters, sets, gauges, or
# timers As opposed to sending 0.  For gauges, this unsets the gauge
# (instead of sending The previous value). Can be individually
# overriden.
statsd_key_flush_delete_idle_stats: yes
# Don't send values to graphite for inactive gauges, as opposed to
# sending the previous value
statsd_delete_gauges: yes
# Don't send values to graphite for inactive timers, as opposed to
# sending `0`
statsd_delete_timers: yes
# Don't send values to graphite for inactive sets, as opposed to sending
# `0`
statsd_delete_sets: yes
# Don't send values to graphite for inactive counters, as opposed to
# sending `0`
statsd_delete_counters: yes
# Prefix to use for the statsd statistics data for this running instance
# of statsd applies to both legacy and new namespacing
statsd_prefix_stats: "{{statsd_title}}"


# Console settings
# ----------------
# Whether to prettyprint the console backend
statsd_console_prettyprint: yes


# Log settings
# ------------
# Where to log: stdout or syslog
statsd_log_backend: stdout
# Name of the application for syslog
statsd_log_application: "{{statsd_service_name}}"
# Log level for [node-]syslog
statsd_log_level: LOG_INFO
#
statsd_log_dir: "/var/log/{{statsd_service_name}}"
statsd_log_file: "{{statsd_log_dir}}/{{statsd_service_name}}.out.log"
statsd_log_error_file: "{{statsd_log_dir}}/{{statsd_service_name}}.err.log"

# Repeaters
# ---------
# An array of hashes of the for `host:` and `port:` that details other
# statsd servers to which the received packets should be "repeated"
# (duplicated to).
#
# Example:
#     [ { host: '10.10.10.10', port: 8125 },
#       { host: 'observer', port: 88125 } ]
statsd_repeater: []
# Whether to use udp4 or udp6 for repeaters.
statsd_repeater_protocol: udp4


# Histograms
# ----------
# For timers, an array of mappings of strings (to match metrics) and
# corresponding ordered non-inclusive upper limits of bins. For all
# matching metrics, histograms are maintained over time by writing the
# frequencies for all bins.
#
# 'inf' means infinity. A lower limit of 0 is assumed.
#
# Default: [], meaning no histograms for any timer.
#
# First match wins. Examples:
#
# * histogram to only track render durations, with unequal
#   class intervals and catchall for outliers:
#     [ { metric: 'render', bins: [ 0.01, 0.1, 1, 10, 'inf'] } ]
#
# * histogram for all timers except 'foo' related,
#   equal class interval and catchall for outliers:
#     [ { metric: 'foo', bins: [] },
#       { metric: '', bins: [ 50, 100, 150, 200, 'inf'] } ]
statsd_histogram: []


# Auto-reload
# -----------
# Whether to watch the config file and reload it when it changes.
statsd_automatic_config_reload: no


# Additional packages
# -------------------
statsd_extra_packages: []
statsd_extra_conf: {}
